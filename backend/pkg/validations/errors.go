package validations

import "errors"

var (
	// Service / REQUEST
	ErrTitleFormat             = errors.New("invalid title format")
	ErrTooManyCat              = errors.New("too many categories. one note can be associated to 4 categories or less")
	ErrCatAlreadyAdded         = errors.New("category is already associated with the given note")
	ErrMinCategory             = errors.New("a note must have at least one category. add a category to delete existing")
	ErrEmptyCategoryFilter     = errors.New("categories filter can't be empty")
	ErrCategoryNotFound        = errors.New("unable to find the specified category")
	ErrDuplicateTitle          = errors.New("duplicate title")
	ErreEmptyTitle             = errors.New("title cannot be empty")
	ErrRepeatedLetters         = errors.New("fields cannot contain 3 consecutive same letters")
	ErrCharactersExcess        = errors.New("title min 5 max - 50 characters")
	ErrEmptyContent            = errors.New("content cannot be empty")
	ErrCharactersContentExcess = errors.New("content min 10 - max 70 characters")
	ErrEmptyCategory           = errors.New("category name cannot be empty")
	ErrCharactersExcessCat     = errors.New("category name min 2 - max 30 characters")
	ErrNoChangesDetected       = errors.New("provided update data is same as existing")
	ErrFullCatCount            = errors.New("remove a category in order to add one, maximum category count reached")
	ErrMissingId               = errors.New("missing note id in path param")
	ErrInlvalidId              = errors.New("invalid id, must be convertable to int")
	ErrMissingParameters       = errors.New("missing id or category param")
	ErrInvalidArchivedValue    = errors.New("invalid isArchived value, should be true or false")
	ErrInvalidUser             = errors.New("invalid name: min 4 max 20 - can't contain 3 consecutive same characters")
	ErrUserAlreadyExists       = errors.New("username already exists")
	ErrNoteNotOwnedByUser      = errors.New("note doesn't belong to the logged used")
	ErrUserNamePassLength      = errors.New("username and password: min 5 - max 20")
	ErrCategoryName            = errors.New("errors parsing category name")

	// DB
	ErrUserIdNotSet       = errors.New("user id not set for the note")
	ErrFilterDB           = errors.New("error during filtering from db")
	ErrNoteCreate         = errors.New("error during creating note")
	ErrFetchingCategory   = errors.New("error feching categories")
	ErrCatAlreadyExist    = errors.New("conflict: duplicate category name")
	ErrCatCreate          = errors.New("err during category creation")
	ErrCatNotFound        = errors.New("no category matches the provided id")
	ErrCatUpdate          = errors.New("error during updating category")
	ErrCatDelete          = errors.New("error deleting category")
	ErrFetchingCategories = errors.New("error during fetching all categories")
	ErrTooManyCategories  = errors.New("too many categories. one note can be associated to 4 categories or less")
	ErrNoNotesFound       = errors.New("no notes were found")
	ErrFetchingNotes      = errors.New("error fetching notes")
	ErrZeroCategory       = errors.New("required at least one category")
	ErrNoteNotFound       = errors.New("no note matches the provided id")
	ErrFetchingNote       = errors.New("error during fetching note")
	ErrAddNewCatToNote    = errors.New("error during updating note adding a category")
	ErrNoteUpdate         = errors.New("error updating note")
	ErrNoteDelete         = errors.New("error deleting note")
	ErrNotTitle           = errors.New("cannot find note with the specified title")

	// API
	ErrJsonResponse    = errors.New("cannot parse response to json")
	ErrNotFound        = errors.New("the requested resource could not be found")
	ErrRateLimitExcess = errors.New("rate limit excess")

	// AUH
	ErrHashingPwd         = errors.New("error occured during hashing password")
	ErrInvalidCredentials = errors.New("invalid user credentials")
	ErrTokenGeneration    = errors.New("error generating token")
	ErrJWT                = errors.New("unauthorized: invalid or expired JWT")
	ErrTokenExpired       = errors.New("expired token")
	ErrTokenExpiry        = errors.New("error getting token expiration")
	ErrInvalidUserID      = errors.New("invalid user id")
	ErrUnauthorized       = errors.New("cannot retreive user id")
)
